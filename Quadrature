#include "nr3.h"
#include "gamma.h"
#include <armadillo>
#include <fstream>
#include <list>
using namespace arma;
//In preface, Numerical explains that they deliberately exclude #include statements
//Found include statements at nr.com/dependencies
//Retrieved files from website
double pi=4.*atan(1);

void gauleg(const Doub x1, const Doub x2, VecDoub_O &x, VecDoub_O &w) //x and w are customized variables defined in previous files
//Doub not a fundamental type, it's a function defined in nr3.h and gamma.h
//Vec not a standard library container, it's a function defined in nr3.h and gamma.h
{
    const Doub EPS=1.0e-14; //EPS is the relative precision.
    Doub z1,z,xm,xl,pp,p3,p2,p1;
    Int n=x.size(); //sets n to the number of elemetns in x
    Int m=(n+1)/2; //The roots are symmetric in the interval, so
    xm=0.5*(x2+x1); //we only have to find half of them.
    xl=0.5*(x2-x1);
    for (Int i=0;i<m;i++) { //Loop over the desired roots.
        z=cos(3.141592654*(i+0.75)/(n+0.5)); //Starting with this approximation to the ith root, we enter the main loop of refinement by Newton’s method.
        do {
            p1=1.0;
            p2=0.0;
            for (Int j=0;j<n;j++) { //Loop up the recurrence relation to get the
                p3=p2; //Legendre polynomial evaluated at z.
                p2=p1;
                p1=((2.0*j+1.0)*z*p2-j*p3)/(j+1);
            }
           //p1 is now the desired Legendre polynomial. We next compute pp, its derivative, by a standard relation involving also p2, the polynomial of one lower order.
            pp=n*(z*p1-p2)/(z*z-1.0);
            z1=z;
            z=z1-p1/pp; //Newton’s method.
        } while (abs(z-z1) > EPS);
        x[i]=xm-xl*z; //Scale the root to the desired interval,
        x[n-1-i]=xm+xl*z; //and put in its symmetric counterpart.
        w[i]=2.0*xl/((1.0-z*z)*pp*pp); //Compute the weight
        w[n-1-i]=w[i]; //and its symmetric counterpart.
    }
}
Doub dimer(Doub g, Doub p, Doub E, Doub m)
{
    return (2./pi)*pow(p,2)/(sqrt(.75*pow(p,2)-m*E)-g);
}


Doub exchange(Doub q, Doub p, Doub E, Doub m)
{
    return (1./(q*p))*log((pow(q,2)+pow(p,2)+q*p-m*E)/(pow(q,2)+pow(p,2)-q*p-m*E));
}

int main() //take the function evaluated at the mesh points, times the appropriate weight, and then sum everything up, result will be equivalent to a good approximation of the integral
{
    Doub g=45.;
    Doub m=938.;
    Doub q,p; //does this error message mean anything?
    Doub E=-8.;
    Doub product;
    int N=10000;
    mat A(N,N);
    mat B;
    VecDoub_O x(N);//constructed vector x and vector w
    VecDoub_O w(N);
    ofstream file;
    file.open ("matrix_data.dat");
    gauleg(0.,100000.,x,w); //gualeg gives the tools to solves an integral
    for(int i=1;i<x.size();i++)
    {
        q=x[i];
        for (int j=1;j<N;j++)
        {
            p=x[j];
            product=w[j]*dimer(g,p,E,m)*exchange(q,p,E,m); //removed weight for now
            A(i,j)=product;
        }
    }
    mat identity (N, N,fill::eye);
    mat LO=identity-A;
    B.ones(1, N);//construct vector B of all 1's, n rows
    mat LO1=inv(LO); //take inverse of matrix A
    //cout<<LO1*trans(B); //multiply vector B by the matrix A-1
    //output column vector with A*tranpose B
    //cout<<1+sum<<"\n";
    mat gamma0=LO1*trans(B);
    for (int i=1;i<N;i++)
        file<<x[i]<<"\t"<<gamma0(i)<<"\n";
    //file<<setw(50)<<gamma;
    file.close();
}

//first column, print value of q
//second column, print value of g
