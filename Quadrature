#include "nr3.h"
#include "gamma.h"
//In preface, Numerical explains that they deliberately exclude #include statements
//Found include statements at nr.com/dependencies
//Retrieved files from website

void gauleg(const Doub x1, const Doub x2, VecDoub_O &x, VecDoub_O &w) //x and w are customized variables defined in previous files
//Doub not a fundamental type, it's a function defined in nr3.h and gamma.h
//Vec not a standard library container, it's a function defined in nr3.h and gamma.h
{
    const Doub EPS=1.0e-14; //EPS is the relative precision.
    Doub z1,z,xm,xl,pp,p3,p2,p1;
    Int n=x.size(); //sets n to the number of elemetns in x
    Int m=(n+1)/2; //The roots are symmetric in the interval, so
    xm=0.5*(x2+x1); //we only have to find half of them.
    xl=0.5*(x2-x1);
    for (Int i=0;i<m;i++) { //Loop over the desired roots.
        z=cos(3.141592654*(i+0.75)/(n+0.5)); //Starting with this approximation to the ith root, we enter the main loop of refinement by Newton’s method.
        do {
            p1=1.0;
            p2=0.0;
            for (Int j=0;j<n;j++) { //Loop up the recurrence relation to get the
                p3=p2; //Legendre polynomial evaluated at z.
                p2=p1;
                p1=((2.0*j+1.0)*z*p2-j*p3)/(j+1);
            }
           //p1 is now the desired Legendre polynomial. We next compute pp, its derivative, by a standard relation involving also p2, the polynomial of one lower order.
            pp=n*(z*p1-p2)/(z*z-1.0);
            z1=z;
            z=z1-p1/pp; //Newton’s method.
        } while (abs(z-z1) > EPS);
        x[i]=xm-xl*z; //Scale the root to the desired interval,
        x[n-1-i]=xm+xl*z; //and put in its symmetric counterpart.
        w[i]=2.0*xl/((1.0-z*z)*pp*pp); //Compute the weight
        w[n-1-i]=w[i]; //and its symmetric counterpart.
    }
}
Doub f(Doub g, Doub p, Doub E, Doub m)
{
    return (2/atan(1))*pow(p,2)/(sqrt(.75*pow(p,2)-m*E)-g);
}


Doub M(Doub q, Doub p, Doub E, Doub m)
{
    return (1./(q*p))*log((pow(q,2)+pow(p,2)+q*p-m*E)/(pow(q,2)+pow(p,2)-q*p-m*E));
}

int main() //take the function evaluated at the mesh points, times the appropriate weight, and then sum everything up, result will be equivalent to a good approximation of the integral
{
    Doub g=23;
    Doub m=34;
    Doub E=-48;
    Doub q=58;
    Doub sum=0;
    int N=5;
    VecDoub_O x(N);//constructed vector x and vector w
    VecDoub_O w(N);
    gauleg(0.,1000.,x,w); //gualeg gives the tools to solves an integral
    for(int i=0;i<x.size();i++)
        sum=sum+w[i]*f(g,x[i],E,m)*M(q,x[i],E,m);
    cout<<1+sum<<"\n";
}
