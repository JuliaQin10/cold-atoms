#include "nr3.h"
#include "gamma.h"
#include <armadillo>
#include <fstream>
#include <list>
using namespace arma;
//In preface, Numerical explains that they deliberately exclude #include statements
//Found include statements at nr.com/dependencies
//Retrieved files from website
double pi = 4. * atan(1);

void gauleg(const Doub x1, const Doub x2, VecDoub_O& x, VecDoub_O& w) //x and w are customized variables defined in previous files
//Doub not a fundamental type, it's a function defined in nr3.h and gamma.h
//Vec not a standard library container, it's a function defined in nr3.h and gamma.h
{
    const Doub EPS = 1.0e-14; //EPS is the relative precision.
    Doub z1, z, xm, xl, pp, p3, p2, p1;
    Int n = x.size(); //sets n to the number of elemetns in x
    Int m = (n + 1) / 2; //The roots are symmetric in the interval, so
    xm = 0.5 * (x2 + x1); //we only have to find half of them.
    xl = 0.5 * (x2 - x1);
    for (Int i = 0; i < m; i++) { //Loop over the desired roots.
        z = cos(3.141592654 * (i + 0.75) / (n + 0.5)); //Starting with this approximation to the ith root, we enter the main loop of refinement by Newton’s method.
        do {
            p1 = 1.0;
            p2 = 0.0;
            for (Int j = 0; j < n; j++) { //Loop up the recurrence relation to get the
                p3 = p2; //Legendre polynomial evaluated at z.
                p2 = p1;
                p1 = ((2.0 * j + 1.0) * z * p2 - j * p3) / (j + 1);
            }
            //p1 is now the desired Legendre polynomial. We next compute pp, its derivative, by a standard relation involving also p2, the polynomial of one lower order.
            pp = n * (z * p1 - p2) / (z * z - 1.0);
            z1 = z;
            z = z1 - p1 / pp; //Newton’s method.
        } while (abs(z - z1) > EPS);
        x[i] = xm - xl * z; //Scale the root to the desired interval,
        x[n - 1 - i] = xm + xl * z; //and put in its symmetric counterpart.
        w[i] = 2.0 * xl / ((1.0 - z * z) * pp * pp); //Compute the weight
        w[n - 1 - i] = w[i]; //and its symmetric counterpart.
    }
}

Doub dimer(Doub g, Doub p, Doub E, Doub m)
{
    return (2. / pi) * pow(p, 2) / (sqrt(.75 * pow(p, 2) - m * E) - g);
}

Doub exchange(Doub q, Doub p, Doub E, Doub m)
{
    if (p==0){
        return 2./(-E*m+q*q);
    }
    else{
        return (1. / (q * p)) * log((pow(q, 2) + pow(p, 2) + q * p - m * E) / (pow(q, 2) + pow(p, 2) - q * p - m * E));
    }
}

Doub inhomogenous(Doub ro, Doub g, Doub p, Doub m, Doub E)
{
    return (ro / 2.) * (g + sqrt(.75 * pow(p, 2) - m * E));
}

Doub inhomogenous2(Doub p, Doub k, Doub m, Doub E)
{
    //return 1.;
    //return 2.*pi/(-E*m+p*p);
    return 2./(-E*m+p*p);
    //return pi/ (p * k) * log((p * p + k * k - m * E + p * k) / (p * p + k * k - m * E - p * k));
}

Doub dimer2(Doub g, Doub q, Doub E, Doub m)
{
    return (2. / pi) * pow(q, 2) / (sqrt(.75 * pow(q, 2) - m * E) - g);
}

Doub exchangeprime(Doub q, Doub p, Doub E, Doub m)
{
    return (2 * m) / (pow(pow(q, 2) + pow(p, 2) - m * E, 2) - pow(q, 2) * pow(p, 2));
}

Doub dimer2prime(Doub g, Doub q, Doub E, Doub m)
{
    return (m / pi) * pow(q, 2) / (sqrt(.75 * pow(q, 2) - m * E) * pow(sqrt(.75 * pow(q, 2) - m * E) - g, 2));
}

Doub timesgee0(Doub g, Doub q, Doub E, Doub m)
{
    return (m / (4. * pi)) * pow(q, 2) / (pow((sqrt(.75 * pow(q, 2) - m * E) - g), 2) * sqrt(.75 * pow(q, 2) - m * E));
}

Doub timesgee0prime(Doub g, Doub q, Doub E, Doub m)
{
    return (1. / (2. * pi)) * pow(q, 2) / (sqrt(.75 * pow(q, 2) - m * E) - g);
}

Doub check1(Doub g, Doub l, Doub E, Doub m)
{
    return pow(l, 2) * m / (4. * pi * pow(g - sqrt(.75 * pow(l, 2) - m * E), 2) * sqrt(.75 * pow(l, 2) - m * E));
    //return pow(l,2)*m/(4.*pi*sqrt(.75*pow(l,2)-m*E));
}
Doub check2(Doub g, Doub l, Doub q, Doub E, Doub m)
{
    return 2. * pow(l, 2) * pow(q, 2) * m / (pi * pi * (g - sqrt(.75 * pow(q, 2) - m * E)) * (g - sqrt(.75 * pow(l, 2) - m * E)) * (pow(q, 2) * pow(l, 2) - pow((pow(q, 2) + pow(l, 2) - m * E), 2)));
    //return 2.*pow(l,2)*pow(q,2)*m/(pi*pi*(pow(q,2)*pow(l,2)-pow((pow(q,2)+pow(l,2)-m*E),2)));
}

Doub wolfram(Doub g, Doub q, Doub E, Doub m, Doub p)
{
    return (q * (-(E * m) + pow(p, 2) - p * q + pow(q, 2)) * (-(m / (-(E * m) + pow(p, 2) - p * q + pow(q, 2))) + (m * (-(E * m) + pow(p, 2) + p * q + pow(q, 2))) / pow(-(E * m) + pow(p, 2) - p * q + pow(q, 2), 2))) /
    (p * (-(E * m) + pow(p, 2) + p * q + pow(q, 2)) * (-g + sqrt(-(E * m) + (3 * pow(q, 2)) / 4.))) +
    (m * q * log((-(E * m) + pow(p, 2) + p * q + pow(q, 2)) / (-(E * m) + pow(p, 2) - p * q + pow(q, 2)))) / (2. * p * sqrt(-(E * m) + (3 * pow(q, 2)) / 4.) * pow(-g + sqrt(-(E * m) + (3 * pow(q, 2)) / 4.), 2));
}

Doub inhomogenous3(Doub r, Doub g, Doub p, Doub m, Doub E)
{
    return 0.5 * r * (g + sqrt(0.75 * p * p - m * E));
}

int main()
{
    Doub g = 1./100.01;
    //Doub g = 0.000000001;
    //Doub g= 0.00989901;
    //Doub m = 0.0825165363;
    Doub m = 1889453.22;
    Doub q, p, k;
    Doub t0dmomentum, variablex, gee0momentum, ZLO, HLO, gee1momentum, t1dmomentum, HNLO, prop;
    Doub length = 1.205*100.01;
    Doub E = -g * g / m;
    Doub ro = 0.1;
    Doub r = 0.1;
    Doub product, sigma0prime, sigma0, sigma1;
    Doub Boundn = -10;
    Doub Boundn1, sigmabound, sigmaboundprime, sigma1bound, B1;
    int N = 1000;
    mat A(N, N);
    mat B;
    vec gee1(N);
    vec productprime(N);
    vec timesgee1prime(N);
    vec gee1prime(N);
    vec realgamma1(N);
    vec inhomogenousB(N);
    vec inhomogenousC(N);
    vec realgamma0(N);
    vec t0d(N);
    vec t1d(N);
    int cutoff = 2900;
    //int cutoff = 3000;
    VecDoub_O x(N);
    VecDoub_O w(N);
    ofstream forces;
    forces.open("forces.dat");
    for (int iter = 1; iter < 100; iter++)
    {
        sigma0 = 0;
        sigma1 = 0;
        sigma0prime = 0;
        t0dmomentum = 0;
        gee0momentum = 0;
        gee1momentum = 0;
        t1dmomentum = 0;
        sigmabound = 0;
        sigmaboundprime = 0;
        sigma1bound=0;
        HLO = 0;
        //g=g+(1./10001.);
        cutoff = cutoff + 100;
        //forces.open("forces" + to_string(cutoff) + ".dat");
        gauleg(0., cutoff, x, w);
        //cout<<"x[0]:"<<x[1]<<endl;
        cout<<"cutoff"<<'\t'<<cutoff<<endl;
        //cout<<"g"<<'\t'<<g<<endl;
        for (int i = 0; i < x.size(); i++)
        {
            q = x[i];
            for (int j = 0; j < N; j++)
            {
                p = x[j];
                product = w[j] * dimer(g, p, E, m) * exchange(q, p, E, m);
                A(i, j) = product;
            }
        }
        mat identity(N, N, fill::eye);
        mat LO = identity - A;
        mat LO1 = inv(LO);
        B.ones(1, N);
        vec gee0 = LO1 * trans(B);
        for (int j = 0; j < N; j++)
        {
            gee1(j) = gee0(j) * inhomogenous(ro, g, x[j], m, E);
        }
        gee1 = LO1 * gee1;
        for (int i = 0; i < N; i++)
        {
            p = x[i];
            k = 0;
            inhomogenousB(i) = inhomogenous2(p, k, m, E);
        }
        t0d = LO1 * inhomogenousB;
        for (int i = 0; i < N; i++)
        {
            k = 0;
            p = x[i];
            inhomogenousC(i) = t0d(i) * inhomogenous3(r, g, p, m, E);
        }
        t1d = LO1 * inhomogenousC;
        for (int i = 0; i < N; i++)
        {
            q = x[i];
            p = 0.;
            t0dmomentum = t0dmomentum + w[i] * dimer(g, q, E, m) * exchange(q, p, E, m) * t0d(i);
        }
        //cout<<"t0dmomentum and inhomgenous2"<<"\t"<<t0dmomentum+inhomogenous2(0., 0., m, E)<<endl;
        t0dmomentum=t0dmomentum+inhomogenous2(0., 0., m, E);
        //cout<<"norm"<<"\t"<<2*g/m<<endl;
        //cout <<"t0dmomentum total"<<"\t"<<t0dmomentum<<endl;
        for (int i = 0; i < N; i++)
        {
            k = 0;
            p = 0;
            q = x[i];
            t1dmomentum = t1dmomentum + w[i] * dimer(g, q, E, m) * exchange(q, p, E, m) * t1d(i);
//            t1dmomentum = t1dmomentum + w[i] * dimer(g, q, E, m) * exchange(q, p, E, m) * t1d(i);
        }
        ZLO = 2 * g / m;
        t1dmomentum = t1dmomentum;
        //t1dmomentum = t1dmomentum + r * g * t0dmomentum;
        for (int i = 0; i < N; i++)
        {
            E = -g * g / m;
            p = 0;
            q = x[i];
            gee0momentum = gee0momentum + w[i] * dimer(g, q, E, m) * exchange(q, p, E, m) * gee0(i);
        }
        gee0momentum=gee0momentum+1.;
        
        //cout <<"gee0momentum"<<"\t"<<gee0momentum<<endl;
        variablex = -(3. * pi * length / m + ZLO * t0dmomentum) / (pi * ZLO * gee0momentum * gee0momentum);
        //cout <<"variablex"<<"\t"<<variablex<<endl;
        for (int i = 0; i < N; i++)
        {
            k = 0;
            p = 0;
            q = x[i];
            gee1momentum = gee1momentum + w[i] * dimer(g, q, E, m) * exchange(q, p, E, m) * gee1(i);
        }
        gee1momentum = gee1momentum + 0.0*r * g * gee0momentum;
        for (int i = 0; i < x.size(); i++)
        {
            p = x[i];
            productprime(i) = 0.0;
            for (int j = 0; j < N; j++)
            {
                q = x[j];
                productprime(i) = productprime(i) + w[j] * dimer2(g, q, E, m) * gee0(j) * exchangeprime(q, p, E, m) + w[j] * exchange(q, p, E, m) * gee0(j) * dimer2prime(g, q, E, m);
            }
        }
        vec gee0prime = LO1 * productprime;
        for (int i = 0; i < x.size(); i++)
        {
            q = x[i];
            sigma0 = sigma0 + w[i] * dimer2(g, q, E, m) * gee0(i);
        }
        //cout <<"sigma0"<<"\t"<<sigma0<<endl;
        for (int i = 0; i < x.size(); i++)
        {
            q = x[i];
            sigma1 = sigma1 + w[i] * dimer2(g, q, E, m) * gee1(i);
        }
        //HLO = 1 / sigma0;
        HLO = variablex / (1. + variablex * sigma0);
        prop = 1./(1.-HLO*sigma0);
        /*HNLO = (-ZLO*t1dmomentum)/
        (pi*ZLO*gee0momentum*gee0momentum*prop
         + pi*HLO*ZLO*sigma0*gee0momentum*gee0momentum*prop*prop);*/
        HNLO = (3.*pi*length*g*r/m - ZLO*t1dmomentum - pi*HLO*HLO*ZLO*sigma1*gee0momentum*gee0momentum*prop*prop - 2.0*gee0momentum*gee1momentum*pi*ZLO*prop*HLO)/
        (pi*ZLO*gee0momentum*gee0momentum*prop
         + pi*HLO*ZLO*sigma0*gee0momentum*gee0momentum*prop*prop);
        //cout<<"pi*ZLO:"<<'\t'<<pi*ZLO<<endl;
        //cout<<"gee0momentum:"<<'\t'<<gee0momentum<<endl;
        //cout<<"prop:"<<'\t'<<prop<<endl;
        cout<<"HLO:"<<'\t'<<HLO<<endl;
        //cout<<"sigma1:"<<'\t'<<sigma1<<endl;
        //cout<<"t1dmomentum:"<<'\t'<<t1dmomentum<<endl;
        //cout<<"ZLO*t1dmomentum:"<<'\t'<<ZLO*t1dmomentum<<endl;
        //cout<<"gee1momentum:"<<'\t'<<gee1momentum<<endl;
        for (int i = 0; i < x.size(); i++)
        {
            q = x[i];
            sigma0prime = sigma0prime + w[i] * timesgee0(g, q, E, m) * gee0(i) + w[i] * timesgee0prime(g, q, E, m) * gee0prime(i);
        }
        
    
        if(cutoff==3000.){
            Boundn=E;
            //Boundn=97.12*E;
            //Boundn=-483.;  //excited state energy
        }
        
        //if(cutoff==200.){
        //    Boundn=-2520.;  //excited state energ y
        //}
        //cout<<"dog"<<endl;
    do
    {
        sigmabound =0.;
        sigmaboundprime =0.;
        for (int i = 0; i < x.size(); i++)
        {
            q = x[i];
            for (int j = 0; j < N; j++)
            {
                p = x[j];
                product = w[j] * dimer(g, p, Boundn, m) * exchange(q, p, Boundn, m);
                A(i,j) = product;
            }
        }
        //cout<<"aardvark"<<endl;
        LO = identity - A;
        LO1 = inv(LO);
        B.ones(1, N);
        //cout<<"baboon"<<endl;
        gee0 = LO1 * trans(B);
        //cout<<"cougar"<<endl;
        for (int i = 0; i < x.size(); i++)
        {
            p = x[i];
            productprime(i) = 0.0;
            for (int j = 0; j < N; j++)
            {
                q = x[j];
                productprime(i) = productprime(i) + w[j] * dimer2(g, q, Boundn, m) * gee0(j) * exchangeprime(q, p, Boundn, m) + w[j] * exchange(q, p, Boundn, m) * gee0(j) * dimer2prime(g, q, Boundn, m);
            }
        }
        gee0prime = LO1 * productprime;
        //cout<<"dolphin"<<endl;
        for (int i = 0; i < x.size(); i++)
        {
            q = x[i];
            sigmabound = sigmabound + w[i] * dimer2(g, q, Boundn, m) * gee0(i);
        }
        for (int i = 0; i < x.size(); i++)
        {
            q = x[i];
            sigmaboundprime = sigmaboundprime + w[i] * timesgee0(g, q, Boundn, m) * gee0(i) + w[i] * timesgee0prime(g, q, Boundn, m) * gee0prime(i);
        }
        Boundn1 = Boundn;
        //cout<<"sigmabound"<<'\t'<<sigmabound<<endl;
        //cout<<"sigmaboundprime"<<'\t'<<sigmaboundprime<<endl;
        Boundn = Boundn + (1.-HLO*sigmabound) / (4.0*HLO*sigmaboundprime);
        //Boundn=Boundn-5.;
        cout<<"test:"<<abs(Boundn1 - Boundn)<<'\t'<<Boundn<<'\t'<<Boundn1<<'\t'<<1.-HLO*sigmabound<<endl;
    } while (abs(Boundn1 - Boundn) > pow(10, -12));
        sigmabound =0.;
        sigmaboundprime =0.;
        for (int i = 0; i < x.size(); i++)
        {
            q = x[i];
            for (int j = 0; j < N; j++)
            {
                p = x[j];
                product = w[j] * dimer(g, p, Boundn, m) * exchange(q, p, Boundn, m);
                A(i,j) = product;
            }
        }
        //cout<<"aardvark"<<endl;
        LO = identity - A;
        LO1 = inv(LO);
        B.ones(1, N);
        //cout<<"baboon"<<endl;
        gee0 = LO1 * trans(B);
        //cout<<"cougar"<<endl;
        for (int i = 0; i < x.size(); i++)
        {
            p = x[i];
            productprime(i) = 0.0;
            for (int j = 0; j < N; j++)
            {
                q = x[j];
                productprime(i) = productprime(i) + w[j] * dimer2(g, q, Boundn, m) * gee0(j) * exchangeprime(q, p, Boundn, m) + w[j] * exchange(q, p, Boundn, m) * gee0(j) * dimer2prime(g, q, Boundn, m);
            }
        }
        gee0prime = LO1 * productprime;
        for (int j = 0; j < N; j++)
        {
            gee1(j) = gee0(j) * inhomogenous(ro, g, x[j], m, Boundn);
        }
        gee1 = LO1 * gee1;
        //cout<<"cat"<<endl;
        for (int i = 0; i < N; i++)
        {
            q = x[i];
            sigmabound = sigmabound + w[i] * dimer2(g, q, Boundn, m) * gee0(i);
            sigmaboundprime = sigmaboundprime + w[i] * timesgee0(g, q, Boundn, m) * gee0(i) + w[i] * timesgee0prime(g, q, Boundn, m) * gee0prime(i);
            sigma1bound = sigma1bound + w[i] * dimer2(g, q, Boundn, m) * gee1(i);
        }
        B1 = -(HLO * sigma1bound + HNLO * sigmabound) / (HLO *16. * sigmaboundprime);
        //cout<<"HLO"<<"\t"<<HLO<<endl;
        cout<<"sigmabound"<<"\t"<<sigmabound<<endl;
        cout<<"sigma1bound"<<"\t"<<sigma1bound<<endl;
        cout<<"sigmaboundprime"<<"\t"<<sigmaboundprime<<endl;
        cout<<"HNLO"<<"\t"<<HNLO<<endl;
        cout<<"E"<<"\t"<<E*2.28988*pow(10, 10)<<endl;
        cout<<"LO Binding Energy"<<"\t"<<Boundn/E<<endl;
        cout<<"NLO Binding Energy"<<"\t"<<B1<<endl;
        cout<<endl;
        forces << cutoff << "\t" << Boundn << "\t" << B1 << "\t" <<endl;
        //forces << Boundn << "\t" << 1-HLO*sigmabound << "\n";
    }
    forces.close();
}

